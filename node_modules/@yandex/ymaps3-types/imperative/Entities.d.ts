type ContextWatcherFn = () => void;
declare class Context<_T> {
    readonly name: string;
    constructor(name: string);
}
declare class ContextProvider<T> {
    private _context?;
    watchers: Set<ContextWatcherFn>;
    consume(): T | undefined;
    provide(nextContext: T): void;
}
type WithDefaults<Props, DefaultProps extends Partial<Props>> = Props & {
    [K in keyof DefaultProps]: K extends keyof Props ? NonNullable<Props[K]> : never;
};
declare abstract class GenericEntity<Props, DefaultProps extends {} = {}, Root extends GenericRootEntity<unknown> = GenericRootEntity<unknown>> {
    protected _props: WithDefaults<Props, DefaultProps>;
    /**
         * @param {Props} props
         * @param {DefaultProps} defaultProps
         */
    constructor(props: Props);
    update(changedProps: Partial<Props>): void;
    protected _onAttach?(): void;
    protected _onDetach?(): void;
    protected _onUpdate?(props: Partial<Props>, oldProps: Props): void;
    get parent(): GenericComplexEntity<unknown> | null;
    get root(): Root | null;
    protected _provideContext<T>(consumer: Context<T>, ctx: T): void;
    protected _consumeContext<T>(consumer: Context<T>): T | undefined;
}
interface ComplexOptions<Root extends GenericRootEntity<unknown> = GenericRootEntity<unknown>> {
    children?: GenericEntity<unknown, {}, Root>[];
    container?: boolean;
}
declare class GenericComplexEntity<Props, DefaultProps extends {} = {}, Root extends GenericRootEntity<unknown> = GenericRootEntity<unknown>> extends GenericEntity<Props, DefaultProps, Root> {
    protected readonly children: readonly GenericEntity<unknown, {}, Root>[];
    protected readonly _childContainer: GenericComplexEntity<unknown, {}, Root>;
    constructor(props: Props, options?: ComplexOptions<Root>);
    protected __makeProxyContainer(): GenericComplexEntity<unknown, {}, Root>;
    /**
         * Adds a child directly to __implChildren, without _childContainer
         */
    protected _addDirectChild(child: GenericEntity<unknown, {}, Root>, index?: number): void;
    protected addChild(child: GenericEntity<unknown, {}, Root>, index?: number): this;
    protected _removeDirectChild(child: GenericEntity<unknown, {}, Root>): void;
    protected removeChild(child: GenericEntity<unknown, {}, Root>): this;
}
declare class GenericGroupEntity<Props, DefaultProps extends {} = {}, Root extends GenericRootEntity<unknown> = GenericRootEntity<unknown>> extends GenericComplexEntity<Props, DefaultProps, Root> {
    readonly children: readonly GenericEntity<unknown, {}, Root>[];
    protected readonly _childContainer: GenericGroupEntity<unknown, {}, Root>;
    protected __makeProxyContainer(): GenericGroupEntity<unknown, {}, Root>;
    addChild(child: GenericEntity<unknown, {}, Root>, index?: number): this;
    removeChild(child: GenericEntity<unknown, {}, Root>): this;
}
declare abstract class GenericRootEntity<Props, DefaultProps extends {} = {}> extends GenericGroupEntity<Props, DefaultProps> {
    get root(): this;
    protected _onAttach: undefined;
    protected _onDetach: undefined;
    abstract destroy(): void;
}
type EntityProps<T extends GenericEntity<unknown>> = T extends GenericEntity<infer P> ? P : never;
type EntityConstructor<TEntity extends GenericEntity<unknown>> = new (...args: any[]) => TEntity;
export { GenericEntity, GenericComplexEntity, GenericGroupEntity, GenericRootEntity, Context, ContextProvider, EntityConstructor, EntityProps };
