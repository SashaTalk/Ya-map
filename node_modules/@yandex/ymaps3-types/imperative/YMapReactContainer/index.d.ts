import type TReact from "react";
import type { Context } from "../Entities";
import { YMapGroupEntity } from "../YMapEnities";
import { overrideKeyReactify } from "../wrappers";
interface YMapReactContainerPropsImpl<TContext> {
    onElement: (element?: Element) => void;
    onContext: (context?: TContext) => void;
}
interface YMapReactContainerProps<TContext> {
    tagName?: string;
    className?: string;
    style?: TReact.CSSProperties;
    context?: Context<TContext>;
}
declare const defaultProps: {
    tagName: string;
};
type DefaultProps = typeof defaultProps;
type ComputedYMapReactContainerProps<TContext> = YMapReactContainerProps<TContext> & YMapReactContainerPropsImpl<TContext>;
declare class YMapReactContainer extends YMapGroupEntity<ComputedYMapReactContainerProps<unknown>, DefaultProps> {
    static defaultProps: {
        tagName: string;
    };
    static [overrideKeyReactify]: import("../../reactify/reactify").CustomReactify<YMapReactContainer, TReact.FC<YMapReactContainerProps<unknown> & {
        children?: TReact.ReactNode;
    }>>;
    element?: Element;
    private _detachDom?;
    private _disposeWatch?;
    protected _onAttach(): void;
    private _adjustContext;
    protected _onDetach(): void;
    protected _onUpdate(props: Partial<ComputedYMapReactContainerProps<unknown>>): void;
}
export { YMapReactContainer, YMapReactContainerProps, YMapReactContainerPropsImpl };
